// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2016.subsystems;

import org.usfirst.frc2016.robot2016.RobotMap;
import org.usfirst.frc2016.robot2016.commands.*;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.networktables.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.tables.ITable;


/**
 *
 */
public class Vision extends Subsystem {
	private ITable contourTable = NetworkTable.getTable("GRIP/ContoursReport");
	private ITable lineTable = NetworkTable.getTable("GRIP/myLinesReport");

	private double[] defaultValue = new double[0];  // value to return when tables are empty
	private double[] centerXs;
	private double[] centerYs;
	private double[] heights;
	private double[] widths;
	private double[] lineLengths;
	private double[] lineX1;
	private double[] lineX2;
	private double[] lineY1;
	private double[] lineY2;
	private double[] lineAngle;
	private boolean[] candidate;
	private int longIndex;
	private final int MAX_X_RANGE = 50;
	private final int MAX_Y_RANGE = 50;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DisplayCameraResults());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());

	}
	private int findLongest() {
		int count; 
		int found = -1;
		double longest= -1; 
		count = lineLengths.length;
		if (count < 1) {
			return -1;
		}
		count--;
		while (count >= 0) {
			if( candidate[count] == true){
				if (lineLengths[count] > longest){
					longest = lineLengths[count];	
					found = count;
				}
			}	
			count--;
		}
		return found;
	}


	public void loadLines() {
		lineLengths = lineTable.getNumberArray("length",defaultValue);
		lineX1 = lineTable.getNumberArray("x1",defaultValue);
		lineX2 = lineTable.getNumberArray("x2",defaultValue);
		lineY2 = lineTable.getNumberArray("y2",defaultValue);
		lineAngle = lineTable.getNumberArray("angle",defaultValue);
	}

	private boolean findCandidates() {
		int count, contourCount;
		double x1, x2, y;
		boolean found = false;

		count = lineLengths.length;
		contourCount = centerXs.length;
		if (contourCount < 1 || count <1) {
			return false;
		}
		x1 = centerXs[0] - widths[0]/2;
		x2 = centerXs[0] + widths[0]/2;
		y = centerYs[0] + heights[0]/2;
		SmartDashboard.putNumber("X1", x1);
		SmartDashboard.putNumber("X2", x2);
		SmartDashboard.putNumber("Y", y);
		count --;
		while (count >= 0) {
			if ((Math.abs(x1 - lineX1[count]) < MAX_X_RANGE) &&
					(Math.abs(y - lineY1[count]) < MAX_Y_RANGE) &&
					(Math.abs(x2 - lineX2[count]) < MAX_X_RANGE)&&
					(Math.abs(y - lineY2[count]) < MAX_Y_RANGE)) {
				candidate[count] = true;
				found = true;
			}
			else {
				candidate[count] = false;
			} count--;
		}

		return found;
	}
	


	public void loadContours() {
		centerXs = contourTable.getNumberArray("centerX", defaultValue);
		centerYs = contourTable.getNumberArray("centerY", defaultValue);
		heights = contourTable.getNumberArray("height", defaultValue);
		widths = contourTable.getNumberArray("width", defaultValue);
		//SmartDashboard.putNumber("Found Line",findCandidates());
	}
	public void displayLines() {
		SmartDashboard.putNumber("Line Count", lineLengths.length);
		if (lineLengths.length > 0 ) {
			SmartDashboard.putNumber("Length 1" , lineLengths[0]);
			SmartDashboard.putNumber("x1" , lineX1[0]);
			SmartDashboard.putNumber("x2" , lineX2[0]);
		}
		else {
			SmartDashboard.putNumber("Length 1",  0);
		}
		if (lineLengths.length > 1 ) {
			SmartDashboard.putNumber("Length 1" , lineLengths[0]);
			SmartDashboard.putNumber("Length 2" , lineLengths[1]);
		}
		else {
			SmartDashboard.putNumber("Length 2",  0);
		}
		if (lineLengths.length > 2 ) {
			SmartDashboard.putNumber("Length 1" , lineLengths[0]);
			SmartDashboard.putNumber("Length 2" , lineLengths[1]);
			SmartDashboard.putNumber("Length 3" , lineLengths[2]);
		}
		else {
			SmartDashboard.putNumber("Length 3",  0);
		}
	}	
	public void displayContours() {
		if (centerXs.length >0) {
			SmartDashboard.putNumber("Center X 1", centerXs[0]);
			SmartDashboard.putNumber("Center Y 1", centerYs[0]);
			SmartDashboard.putNumber("Height 1", heights[0]);
			SmartDashboard.putNumber("Width 1", widths[0]);
		}
		else {
			SmartDashboard.putNumber("Center X 1", 0);
			SmartDashboard.putNumber("Center Y 1", 0);
			SmartDashboard.putNumber("Height 1", 0);
			SmartDashboard.putNumber("Width 1", 0);
		}

		if (centerXs.length > 1) {
			SmartDashboard.putNumber("Center 2", centerXs[1]);
			SmartDashboard.putNumber("Center 2", centerYs[1]);
			SmartDashboard.putNumber("Height 2", heights[1]);
			SmartDashboard.putNumber("Width 2", widths[1]);
		}
		else {
			SmartDashboard.putNumber("Center X 2", 0);
			SmartDashboard.putNumber("Center Y 2", 0);
			SmartDashboard.putNumber("Height 2", 0);
			SmartDashboard.putNumber("Width 2", 0);
		}

		if (centerXs.length > 2) {
			SmartDashboard.putNumber("Center X 3", centerXs[2]);
			SmartDashboard.putNumber("Center Y 3", centerYs[2]);
			SmartDashboard.putNumber("Height 3", heights[2]);
			SmartDashboard.putNumber("Width 3", widths[2]);
		}
		else {
			SmartDashboard.putNumber("Center X 3", 0);
			SmartDashboard.putNumber("Center Y 3", 0);
			SmartDashboard.putNumber("Height 3", 0);
			SmartDashboard.putNumber("Width 3", 0);
		}
		if (centerXs.length > 3) {
			SmartDashboard.putNumber("Center X 4", centerXs[3]);
			SmartDashboard.putNumber("Center Y 4", centerYs[3]);
			SmartDashboard.putNumber("Height 4", heights[3]);
			SmartDashboard.putNumber("Width 4", widths[3]);
		}
		else {
			SmartDashboard.putNumber("Center X 4", 0);
			SmartDashboard.putNumber("Center Y 4", 0);
			SmartDashboard.putNumber("Height 4", 0);
			SmartDashboard.putNumber("Width 4", 0);
		}
	}

	public int isolateLine(){
		loadLines();
		loadContours();
			if (findCandidates()) {
			longIndex = findLongest();
			
		}
return longIndex;
	}

}


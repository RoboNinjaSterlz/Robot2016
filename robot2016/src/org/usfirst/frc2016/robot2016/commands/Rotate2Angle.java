// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc2016.robot2016.Robot;

/**
 *
 */
public class Rotate2Angle extends Command {
	private double lastSteer;
	private final double ACCEPTABLE_ERROR = .01;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double m_angle;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Rotate2Angle(double angle) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_angle = angle;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	lastSteer = 100; // initialize to non-zero so first isfinished doesn't exit.
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//Robot.drivetrain.arcadeDrive(Robot.oi.getDriveLeft());
//    	double steer =  -gyroP * (Robot.gyro.getAngle() - m_angle);
    	double steer =  (Robot.gyro.getAngle() - m_angle);
    	if (steer > 180) {
    		steer = steer - 360;
    	}
    	else if (steer < -180) {
    		steer = steer + 360;
    	}
    	steer *= -Robot.gyro.gyroP;
    	
    	if (steer > Robot.gyro.TURN_MAX) {
    		steer = Robot.gyro.TURN_MAX;
    	}
    	else if (steer < -Robot.gyro.TURN_MAX) {
    		steer = -Robot.gyro.TURN_MAX;
    	}
//    	if (m_speed== 0) {
//    		//Use the joystick or stop if centered
//    		Robot.drivetrain.arcadeDrive(Robot.oi.driveLeft.getY(), steer);
//    	}
//    	else {
    		Robot.drivetrain.arcadeDrive(0, steer);
//    	}
    	lastSteer = steer;
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return Math.abs(lastSteer) <= ACCEPTABLE_ERROR;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drivetrain.driveStop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

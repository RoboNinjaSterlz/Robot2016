// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2016.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2016.robot2016.Robot;

/**
 *
 */
public class RollerPOV extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public RollerPOV() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.intake);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	int pov;
    	pov = (Robot.oi.operatorJoy.getPOV());
		switch (pov) {
		
		/*
		 * This is the case where the POV is centered, stop the intake here
		 */
		case -1:
		case 90:
		case 270:
			Robot.intake.rollerOff();
			break;

		/*
		 * POV is pressed forward, cause roller to expell the ball.
		 */
		case 0:
		case 45:
		case 315:
			Robot.intake.rollerOut();
			break;
		
		/*
		 * POV is back, cause the ball to enter the bot.
		 */
		case 180:
		case 135:
		case 225:
			Robot.intake.rollerIn();
			break;
			

		/*
		 *  While this isn't obvious, there are positions between the above cases.
		 * If the operator drifts into one of these, the defalut code below
		 * prevents the roller from stopping. If the pov continues to move and
		 * lands on one of the above cases, the roller will change as needed.
		 */
		default:
			break;
		}

    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.intake.rollerOff();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2016.robot2016.commands;

import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc2016.robot2016.Robot;

/**
 *
 */
public class LiftHookWinch extends Command {

	private int waitCounter;
	private final double DELAYPERCOUNT = .02;
	private final double TIME2WAIT = 5.00;
	private boolean Overlimit=false;
	private int overlimitCounter = 0;
	// voltage to the winch for lifting.
	private final double WINCHSPEED = -.6;
	private final double Currentlimit = 2.45;
	private boolean winchDone = false;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	//public PowerDistributionPanel pdPanel;
	public LiftHookWinch() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.winch);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	//Overlimit = false;
    	winchDone = false;
    	//waitCounter = 0;
    	overlimitCounter = 0;
    	Robot.winch.moveWinch(WINCHSPEED);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	/*
    	//waitCounter++;
    	//if (Overlimit) {
    		if (Robot.pdPanel.getCurrent(5) < Currentlimit) { 
    			if (overlimitCounter > 0) {
    				overlimitCounter--;
    			}
    			else {
    				overlimitCounter = 0;
    				Robot.winch.moveWinch(WINCHSPEED);
    			}
    		}
    	}
    	 {
    	*/
    	if (Robot.pdPanel.getCurrent(5) > Currentlimit) { 
    			if (overlimitCounter < 20) {
    				overlimitCounter++;
    			}
    			else {
    				overlimitCounter = 20;
    				Robot.winch.moveWinch(0);
    				winchDone = true;
    			}
    	//	}
    		
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        //if (waitCounter >= (TIME2WAIT/DELAYPERCOUNT)) {
    	//if (!Robot.oi.cCI.getRawButton(1)) {
    	if (winchDone) {
    	return true;
    	}
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.winch.moveWinch(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
